// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.gbd.union.domain;

import com.gbd.union.domain.Company;
import com.gbd.union.domain.Message;
import java.lang.Long;
import java.lang.String;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Message_Roo_Finder {
    
    public static TypedQuery<Message> Message.findMessagesByMobile(Long mobile) {
        if (mobile == null) throw new IllegalArgumentException("The mobile argument is required");
        EntityManager em = Message.entityManager();
        TypedQuery<Message> q = em.createQuery("SELECT Message FROM Message AS message WHERE message.mobile = :mobile", Message.class);
        q.setParameter("mobile", mobile);
        return q;
    }
    
    public static TypedQuery<Message> Message.findMessagesByCreatedBetween(Date minCreated, Date maxCreated) {
        if (minCreated == null) throw new IllegalArgumentException("The minCreated argument is required");
        if (maxCreated == null) throw new IllegalArgumentException("The maxCreated argument is required");
        EntityManager em = Message.entityManager();
        TypedQuery<Message> q = em.createQuery("SELECT Message FROM Message AS message WHERE message.created BETWEEN :minCreated AND :maxCreated", Message.class);
        q.setParameter("minCreated", minCreated);
        q.setParameter("maxCreated", maxCreated);
        return q;
    }
    
    public static TypedQuery<Message> Message.findMessagesBySp(Company sp) {
        if (sp == null) throw new IllegalArgumentException("The sp argument is required");
        EntityManager em = Message.entityManager();
        TypedQuery<Message> q = em.createQuery("SELECT Message FROM Message AS message WHERE message.sp = :sp", Message.class);
        q.setParameter("sp", sp);
        return q;
    }
    
    public static TypedQuery<Message> Message.findMessagesByCp(Company cp) {
        if (cp == null) throw new IllegalArgumentException("The cp argument is required");
        EntityManager em = Message.entityManager();
        TypedQuery<Message> q = em.createQuery("SELECT Message FROM Message AS message WHERE message.cp = :cp", Message.class);
        q.setParameter("cp", cp);
        return q;
    }
    
    public static TypedQuery<Message> Message.findMessagesByLinkId(String linkId) {
        if (linkId == null || linkId.length() == 0) throw new IllegalArgumentException("The linkId argument is required");
        EntityManager em = Message.entityManager();
        TypedQuery<Message> q = em.createQuery("SELECT Message FROM Message AS message WHERE message.linkId = :linkId", Message.class);
        q.setParameter("linkId", linkId);
        return q;
    }
    
}
