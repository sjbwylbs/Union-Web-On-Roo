// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.gbd.union.domain;

import com.gbd.union.domain.CityDataOnDemand;
import com.gbd.union.domain.MobileCity;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MobileCityDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MobileCityDataOnDemand: @Component;
    
    private Random MobileCityDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<MobileCity> MobileCityDataOnDemand.data;
    
    @Autowired
    private CityDataOnDemand MobileCityDataOnDemand.cityDataOnDemand;
    
    public MobileCity MobileCityDataOnDemand.getNewTransientMobileCity(int index) {
        com.gbd.union.domain.MobileCity obj = new com.gbd.union.domain.MobileCity();
        obj.setCity(cityDataOnDemand.getRandomCity());
        obj.setMobilePrefix(new Integer(index));
        return obj;
    }
    
    public MobileCity MobileCityDataOnDemand.getSpecificMobileCity(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        MobileCity obj = data.get(index);
        return MobileCity.findMobileCity(obj.getId());
    }
    
    public MobileCity MobileCityDataOnDemand.getRandomMobileCity() {
        init();
        MobileCity obj = data.get(rnd.nextInt(data.size()));
        return MobileCity.findMobileCity(obj.getId());
    }
    
    public boolean MobileCityDataOnDemand.modifyMobileCity(MobileCity obj) {
        return false;
    }
    
    public void MobileCityDataOnDemand.init() {
        data = com.gbd.union.domain.MobileCity.findMobileCityEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'MobileCity' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.gbd.union.domain.MobileCity>();
        for (int i = 0; i < 10; i++) {
            com.gbd.union.domain.MobileCity obj = getNewTransientMobileCity(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
