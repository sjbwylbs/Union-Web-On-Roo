// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.gbd.union.domain;

import com.gbd.union.domain.ChannelDataOnDemand;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ChannelIntegrationTest_Roo_IntegrationTest {
    
    declare @type: ChannelIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: ChannelIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext.xml");
    
    declare @type: ChannelIntegrationTest: @Transactional;
    
    @Autowired
    private ChannelDataOnDemand ChannelIntegrationTest.dod;
    
    @Test
    public void ChannelIntegrationTest.testCountChannels() {
        org.junit.Assert.assertNotNull("Data on demand for 'Channel' failed to initialize correctly", dod.getRandomChannel());
        long count = com.gbd.union.domain.Channel.countChannels();
        org.junit.Assert.assertTrue("Counter for 'Channel' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void ChannelIntegrationTest.testFindChannel() {
        com.gbd.union.domain.Channel obj = dod.getRandomChannel();
        org.junit.Assert.assertNotNull("Data on demand for 'Channel' failed to initialize correctly", obj);
        java.lang.Integer id = obj.getId();
        org.junit.Assert.assertNotNull("Data on demand for 'Channel' failed to provide an identifier", id);
        obj = com.gbd.union.domain.Channel.findChannel(id);
        org.junit.Assert.assertNotNull("Find method for 'Channel' illegally returned null for id '" + id + "'", obj);
        org.junit.Assert.assertEquals("Find method for 'Channel' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void ChannelIntegrationTest.testFindAllChannels() {
        org.junit.Assert.assertNotNull("Data on demand for 'Channel' failed to initialize correctly", dod.getRandomChannel());
        long count = com.gbd.union.domain.Channel.countChannels();
        org.junit.Assert.assertTrue("Too expensive to perform a find all test for 'Channel', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        java.util.List<com.gbd.union.domain.Channel> result = com.gbd.union.domain.Channel.findAllChannels();
        org.junit.Assert.assertNotNull("Find all method for 'Channel' illegally returned null", result);
        org.junit.Assert.assertTrue("Find all method for 'Channel' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void ChannelIntegrationTest.testFindChannelEntries() {
        org.junit.Assert.assertNotNull("Data on demand for 'Channel' failed to initialize correctly", dod.getRandomChannel());
        long count = com.gbd.union.domain.Channel.countChannels();
        if (count > 20) count = 20;
        java.util.List<com.gbd.union.domain.Channel> result = com.gbd.union.domain.Channel.findChannelEntries(0, (int) count);
        org.junit.Assert.assertNotNull("Find entries method for 'Channel' illegally returned null", result);
        org.junit.Assert.assertEquals("Find entries method for 'Channel' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void ChannelIntegrationTest.testFlush() {
        com.gbd.union.domain.Channel obj = dod.getRandomChannel();
        org.junit.Assert.assertNotNull("Data on demand for 'Channel' failed to initialize correctly", obj);
        java.lang.Integer id = obj.getId();
        org.junit.Assert.assertNotNull("Data on demand for 'Channel' failed to provide an identifier", id);
        obj = com.gbd.union.domain.Channel.findChannel(id);
        org.junit.Assert.assertNotNull("Find method for 'Channel' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyChannel(obj);
        java.lang.Integer currentVersion = obj.getVersion();
        obj.flush();
        org.junit.Assert.assertTrue("Version for 'Channel' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void ChannelIntegrationTest.testMerge() {
        com.gbd.union.domain.Channel obj = dod.getRandomChannel();
        org.junit.Assert.assertNotNull("Data on demand for 'Channel' failed to initialize correctly", obj);
        java.lang.Integer id = obj.getId();
        org.junit.Assert.assertNotNull("Data on demand for 'Channel' failed to provide an identifier", id);
        obj = com.gbd.union.domain.Channel.findChannel(id);
        boolean modified =  dod.modifyChannel(obj);
        java.lang.Integer currentVersion = obj.getVersion();
        com.gbd.union.domain.Channel merged = (com.gbd.union.domain.Channel) obj.merge();
        obj.flush();
        org.junit.Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        org.junit.Assert.assertTrue("Version for 'Channel' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void ChannelIntegrationTest.testPersist() {
        org.junit.Assert.assertNotNull("Data on demand for 'Channel' failed to initialize correctly", dod.getRandomChannel());
        com.gbd.union.domain.Channel obj = dod.getNewTransientChannel(Integer.MAX_VALUE);
        org.junit.Assert.assertNotNull("Data on demand for 'Channel' failed to provide a new transient entity", obj);
        org.junit.Assert.assertNull("Expected 'Channel' identifier to be null", obj.getId());
        obj.persist();
        obj.flush();
        org.junit.Assert.assertNotNull("Expected 'Channel' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void ChannelIntegrationTest.testRemove() {
        com.gbd.union.domain.Channel obj = dod.getRandomChannel();
        org.junit.Assert.assertNotNull("Data on demand for 'Channel' failed to initialize correctly", obj);
        java.lang.Integer id = obj.getId();
        org.junit.Assert.assertNotNull("Data on demand for 'Channel' failed to provide an identifier", id);
        obj = com.gbd.union.domain.Channel.findChannel(id);
        obj.remove();
        obj.flush();
        org.junit.Assert.assertNull("Failed to remove 'Channel' with identifier '" + id + "'", com.gbd.union.domain.Channel.findChannel(id));
    }
    
}
