// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.gbd.union.domain;

import com.gbd.union.domain.Message;
import com.gbd.union.domain.StatusTypeDataOnDemand;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MessageDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MessageDataOnDemand: @Component;
    
    private Random MessageDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Message> MessageDataOnDemand.data;
    
    @Autowired
    private StatusTypeDataOnDemand MessageDataOnDemand.statusTypeDataOnDemand;
    
    public Message MessageDataOnDemand.getNewTransientMessage(int index) {
        com.gbd.union.domain.Message obj = new com.gbd.union.domain.Message();
        obj.setCity(null);
        java.lang.String command = "command_" + index;
        if (command.length() > 100) {
            command  = command.substring(0, 100);
        }
        obj.setCommand(command);
        obj.setCp(null);
        obj.setCreated(new java.util.Date());
        obj.setIsEnable(Boolean.TRUE);
        java.lang.String linkId = "linkId_" + index;
        if (linkId.length() > 20) {
            linkId  = linkId.substring(0, 20);
        }
        obj.setLinkId(linkId);
        java.lang.Long mobile = new Integer(index).longValue();
        if (mobile < 10000000000L || mobile > 20000000000L) {
            mobile = 20000000000L;
        }
        obj.setMobile(mobile);
        obj.setProvince(null);
        java.lang.String serviceId = "serviceId_" + index;
        if (serviceId.length() > 20) {
            serviceId  = serviceId.substring(0, 20);
        }
        obj.setServiceId(serviceId);
        obj.setSp(null);
        java.lang.String spcode = "spcode_" + index;
        if (spcode.length() > 20) {
            spcode  = spcode.substring(0, 20);
        }
        obj.setSpcode(spcode);
        obj.setStatus(statusTypeDataOnDemand.getRandomStatusType());
        obj.setSynStatus(null);
        java.lang.Integer synTimes = new Integer(index);
        if (synTimes < 0 || synTimes > 10) {
            synTimes = 10;
        }
        obj.setSynTimes(synTimes);
        obj.setSyned(new java.util.Date());
        obj.setUpdated(new java.util.Date());
        return obj;
    }
    
    public Message MessageDataOnDemand.getSpecificMessage(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Message obj = data.get(index);
        return Message.findMessage(obj.getId());
    }
    
    public Message MessageDataOnDemand.getRandomMessage() {
        init();
        Message obj = data.get(rnd.nextInt(data.size()));
        return Message.findMessage(obj.getId());
    }
    
    public boolean MessageDataOnDemand.modifyMessage(Message obj) {
        return false;
    }
    
    public void MessageDataOnDemand.init() {
        data = com.gbd.union.domain.Message.findMessageEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Message' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.gbd.union.domain.Message>();
        for (int i = 0; i < 10; i++) {
            com.gbd.union.domain.Message obj = getNewTransientMessage(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
